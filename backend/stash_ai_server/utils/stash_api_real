from typing import Any, Dict
from urllib.parse import urlparse
from stash_ai_server.core.system_settings import get_value as sys_get
from stashapi.stashapp import StashInterface

class StashAPI:
    stash_url: str
    api_key: str | None
    stash_interface: StashInterface | None = None
    tag_id_cache: Dict[str, int] = {}

    def __init__(self) -> None:
        self.stash_url = sys_get("STASH_API_URL")
        self.api_key = sys_get("STASH_API_KEY")
        if self.stash_url:
            self.stash_interface = _construct_stash_interface(self.stash_url, self.api_key)

    def fetch_tag_id(self, tag_name: str, parent_id: int | None = None, create_if_missing: bool = False, use_cache: bool = True) -> int | None:
        if use_cache and tag_name in self.tag_id_cache:
            return self.tag_id_cache[tag_name]
        if not self.stash_interface:
            return None
        
        if create_if_missing:
            if parent_id is None:
                tag = self.stash_interface.find_tag(tag_name, create=True)["id"]
            else:
                tag = self.stash_interface.find_tag(tag_name)["id"]
                if tag is None:
                    tag = self.stash_interface.create_tag({"name":tag_name, "ignore_auto_tag": True, "parent_ids":[parent_id]})['id']
        else:
            tag = self.stash_interface.find_tag_by_name(tag_name)
        if tag:
            self.tag_id_cache[tag_name] = tag.id
            return tag.id
        return None


def _have_valid_api_key(api_key) -> bool:
    return bool(api_key and api_key != 'REPLACE_WITH_API_KEY' and api_key.strip() != '')

def _construct_stash_interface(url: str, api_key: str = None) -> StashInterface:
    """Construct a StashInterface from environment variables."""
    parsed = urlparse(url)
    scheme = parsed.scheme or 'http'
    # Extract hostname and port separately so stashapi doesn't append default port again
    hostname = parsed.hostname or 'localhost'
    port = parsed.port if parsed.port else 3000
    conn: Dict[str, Any] = {
        'Scheme': scheme,
        'Host': hostname,
        'Port': port,
    }
    if _have_valid_api_key(api_key):
        conn['ApiKey'] = api_key
    return StashInterface(conn)