name: Release (wheels -> PyPI -> GHCR image)

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: read
  packages: write

jobs:
  determine:
    name: Determine tag + version
    runs-on: ubuntu-latest
    outputs:
      is_release: ${{ steps.set.outputs.is_release }}
      tag: ${{ steps.set.outputs.tag }}
      version: ${{ steps.set.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: set
        run: |
          REF="${GITHUB_REF}"
          if [[ "$REF" == refs/tags/v* ]]; then
            TAG="${REF#refs/tags/}"
            VERSION=${TAG#v}
            git fetch origin main --depth=1 || true
            COMMIT=$(git rev-parse "$REF")
            if git merge-base --is-ancestor "$COMMIT" origin/main; then
              echo "is_release=true" >> $GITHUB_OUTPUT
            else
              echo "is_release=false" >> $GITHUB_OUTPUT
            fi
            echo "tag=${TAG}" >> $GITHUB_OUTPUT
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
          else
            echo "is_release=false" >> $GITHUB_OUTPUT
            SHORT_SHA=$(git rev-parse --short HEAD)
            echo "tag=dev-${SHORT_SHA}" >> $GITHUB_OUTPUT
            echo "version=0.0.0" >> $GITHUB_OUTPUT
          fi

  build-wheel:
    name: Build wheel (universal)
    runs-on: ubuntu-latest
    needs: determine
    if: needs.determine.outputs.is_release == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Sync version from tag
        env:
          VERSION: ${{ needs.determine.outputs.version }}
        run: |
          echo "Setting backend/pyproject.toml version to $VERSION"
          python - <<'PY'
          import pathlib, os, re
          p=pathlib.Path('backend/pyproject.toml')
          s=p.read_text(encoding='utf8')
          v=os.environ['VERSION']
          # Try to replace an existing version line first
          new, n = re.subn(r'(?m)^version\s*=\s*"[^"]+"', f'version = "{v}"', s)
          if n == 0:
              # Insert the version under the [project] table if missing
              parts = s.split('\n')
              out = []
              inserted = False
              i = 0
              while i < len(parts):
                  out.append(parts[i])
                  if parts[i].strip() == '[project]' and not inserted:
                      # insert on next line
                      i += 1
                      out.append(f'version = "{v}"')
                      inserted = True
                      continue
                  i += 1
              new = '\n'.join(out)
          p.write_text(new, encoding='utf8')
          print('Updated version ->', v)
          PY
      - name: Install build tooling
        run: python -m pip install --upgrade pip setuptools wheel build
      - name: Build wheel
        working-directory: backend
        run: python -m build --wheel
      - name: Show dist contents
        run: ls -l backend/dist
      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheel
          path: backend/dist/*.whl

  publish:
    name: Publish wheel to PyPI
    runs-on: ubuntu-latest
    needs: [determine, build-wheel]
    if: needs.determine.outputs.is_release == 'true'
    steps:
      - name: Download wheel artifact
        uses: actions/download-artifact@v4
        with:
          name: wheel
          path: dist_dl
      - name: List wheel
        run: ls -l dist_dl
      - name: Validate wheel version
        env:
          VERSION: ${{ needs.determine.outputs.version }}
        run: |
          python - <<'PY'
          import os, zipfile, sys, glob
          v=os.environ['VERSION']
          bad=0
          for w in glob.glob('dist_dl/*.whl'):
            with zipfile.ZipFile(w) as z:
              meta=[n for n in z.namelist() if n.endswith('METADATA')]
              if not meta: print('No METADATA in', w); bad+=1; continue
              text=z.read(meta[0]).decode()
              for line in text.splitlines():
                if line.startswith('Version:'):
                  got=line.split(':',1)[1].strip()
                  if got!=v:
                    print('Mismatch', w, got, '!=', v); bad+=1
                  else:
                    print('OK', w, got)
                  break
          sys.exit(bad)
          PY
      - name: Install twine
        run: python -m pip install --upgrade twine
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: python -m twine upload dist_dl/*.whl

  image:
    name: Build & push GHCR image
    runs-on: ubuntu-latest
    needs: [determine, publish]
    if: needs.determine.outputs.is_release == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Wait for PyPI to index published wheel
        env:
          VERSION: ${{ needs.determine.outputs.version }}
        run: |
          python - <<'PY'
          import os, time, sys, urllib.request, json
          v=os.environ['VERSION']
          url='https://pypi.org/pypi/stash-ai-server/json'
          attempts=0
          found=False
          max_attempts=5
          while attempts < max_attempts:
              try:
                  with urllib.request.urlopen(url, timeout=15) as r:
                      data=json.load(r)
                      if v in data.get('releases', {}):
                          print('PyPI has version', v)
                          found=True
                          break
              except Exception as e:
                  print('check failed', e)
              attempts += 1
              print(f'retry {attempts}/{max_attempts} sleeping 20s')
              time.sleep(20)
          if not found:
              print('Version not found on PyPI after retries; aborting')
              sys.exit(1)
          PY
      - name: Build & push
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          target: runtime
          build-args: |
            VERSION=${{ needs.determine.outputs.version }}
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ github.repository_owner }}/stash-ai-server:${{ needs.determine.outputs.version }}
            ghcr.io/${{ github.repository_owner }}/stash-ai-server:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
