name: Release (wheels -> PyPI -> GHCR image)

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: read
  packages: write

jobs:
  determine:
    name: Determine tag + version
    runs-on: ubuntu-latest
    outputs:
      is_release: ${{ steps.set.outputs.is_release }}
      tag: ${{ steps.set.outputs.tag }}
      version: ${{ steps.set.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: set
        run: |
          REF="${GITHUB_REF}"
          if [[ "$REF" == refs/tags/v* ]]; then
            TAG="${REF#refs/tags/}"
            VERSION=${TAG#v}
            git fetch origin main --depth=1 || true
            COMMIT=$(git rev-parse "$REF")
            if git merge-base --is-ancestor "$COMMIT" origin/main; then
              echo "is_release=true" >> $GITHUB_OUTPUT
            else
              echo "is_release=false" >> $GITHUB_OUTPUT
            fi
            echo "tag=${TAG}" >> $GITHUB_OUTPUT
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
          else
            echo "is_release=false" >> $GITHUB_OUTPUT
            SHORT_SHA=$(git rev-parse --short HEAD)
            echo "tag=dev-${SHORT_SHA}" >> $GITHUB_OUTPUT
            echo "version=0.0.0" >> $GITHUB_OUTPUT
          fi

  build-wheels:
    name: Build wheels (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: determine
    if: needs.determine.outputs.is_release == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            py: '3.12'
          - os: macos-latest
            py: '3.12'
          - os: windows-latest
            py: '3.12'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py }}
      - name: Sync version from tag
        env:
          VERSION: ${{ needs.determine.outputs.version }}
        shell: bash
        run: |
          echo "Setting backend/pyproject.toml version to $VERSION"
          python - <<'PY'
          import pathlib, os, re
          p=pathlib.Path('backend/pyproject.toml')
          s=p.read_text(encoding='utf8')
          v=os.environ['VERSION']
          s=re.sub(r'(?m)^version\s*=\s*"[^"]+"', f'version = "{v}"', s)
          p.write_text(s, encoding='utf8')
          print('Updated version ->', v)
          PY
      - name: Install build tooling
        run: python -m pip install --upgrade pip setuptools wheel build
      - name: Build wheel
        working-directory: backend
        run: |
          python -m build --wheel
      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: backend/dist/*.whl

  publish:
    name: Publish wheels to PyPI
    runs-on: ubuntu-latest
    needs: [determine, build-wheels]
    if: needs.determine.outputs.is_release == 'true'
    steps:
      - name: Download wheel artifacts
        uses: actions/download-artifact@v4
        with:
          name: wheels
          path: wheelhouse
      - name: List wheels
        run: ls -1 wheelhouse
      - name: Validate wheel versions
        env:
          VERSION: ${{ needs.determine.outputs.version }}
        run: |
          python - <<'PY'
          import os, zipfile, sys
          v=os.environ['VERSION']
          bad=0
          for w in os.listdir('wheelhouse'):
            if not w.endswith('.whl'): continue
            with zipfile.ZipFile(os.path.join('wheelhouse', w)) as z:
              meta = [n for n in z.namelist() if n.endswith('METADATA')]
              if not meta:
                print('No METADATA in', w); bad+=1; continue
              text = z.read(meta[0]).decode()
              for line in text.splitlines():
                if line.startswith('Version:'):
                  got=line.split(':',1)[1].strip()
                  if got!=v:
                    print('Mismatch', w, got, '!=', v); bad+=1
                  else:
                    print('OK', w, got)
                  break
          sys.exit(bad)
          PY
      - name: Install twine
        run: python -m pip install --upgrade twine
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: python -m twine upload wheelhouse/*.whl

  image:
    name: Build & push GHCR image
    runs-on: ubuntu-latest
    needs: [determine, publish]
    if: needs.determine.outputs.is_release == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build & push
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          target: runtime
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ github.repository_owner }}/stash-ai-server:${{ needs.determine.outputs.version }}
            ghcr.io/${{ github.repository_owner }}/stash-ai-server:${{ needs.determine.outputs.tag }}
            ghcr.io/${{ github.repository_owner }}/stash-ai-server:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
